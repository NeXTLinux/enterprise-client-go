/*
Nextlinux Engine API Server

This is the Nextlinux Engine API. Provides the primary external API for users of the service.

API version: 0.6.0
Contact: nurmi@nextlinux.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package engine

import (
	"encoding/json"
)

// ServiceReference A reference to a service in the system
type ServiceReference struct {
	// The unique id of the host on which the service is executing
	Hostid *string `json:"hostid,omitempty"`
	// Registered service name
	Servicename *string `json:"servicename,omitempty"`
}

// NewServiceReference instantiates a new ServiceReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceReference() *ServiceReference {
	this := ServiceReference{}
	return &this
}

// NewServiceReferenceWithDefaults instantiates a new ServiceReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceReferenceWithDefaults() *ServiceReference {
	this := ServiceReference{}
	return &this
}

// GetHostid returns the Hostid field value if set, zero value otherwise.
func (o *ServiceReference) GetHostid() string {
	if o == nil || o.Hostid == nil {
		var ret string
		return ret
	}
	return *o.Hostid
}

// GetHostidOk returns a tuple with the Hostid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceReference) GetHostidOk() (*string, bool) {
	if o == nil || o.Hostid == nil {
		return nil, false
	}
	return o.Hostid, true
}

// HasHostid returns a boolean if a field has been set.
func (o *ServiceReference) HasHostid() bool {
	if o != nil && o.Hostid != nil {
		return true
	}

	return false
}

// SetHostid gets a reference to the given string and assigns it to the Hostid field.
func (o *ServiceReference) SetHostid(v string) {
	o.Hostid = &v
}

// GetServicename returns the Servicename field value if set, zero value otherwise.
func (o *ServiceReference) GetServicename() string {
	if o == nil || o.Servicename == nil {
		var ret string
		return ret
	}
	return *o.Servicename
}

// GetServicenameOk returns a tuple with the Servicename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceReference) GetServicenameOk() (*string, bool) {
	if o == nil || o.Servicename == nil {
		return nil, false
	}
	return o.Servicename, true
}

// HasServicename returns a boolean if a field has been set.
func (o *ServiceReference) HasServicename() bool {
	if o != nil && o.Servicename != nil {
		return true
	}

	return false
}

// SetServicename gets a reference to the given string and assigns it to the Servicename field.
func (o *ServiceReference) SetServicename(v string) {
	o.Servicename = &v
}

func (o ServiceReference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hostid != nil {
		toSerialize["hostid"] = o.Hostid
	}
	if o.Servicename != nil {
		toSerialize["servicename"] = o.Servicename
	}
	return json.Marshal(toSerialize)
}

type NullableServiceReference struct {
	value *ServiceReference
	isSet bool
}

func (v NullableServiceReference) Get() *ServiceReference {
	return v.value
}

func (v *NullableServiceReference) Set(val *ServiceReference) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceReference) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceReference(val *ServiceReference) *NullableServiceReference {
	return &NullableServiceReference{value: val, isSet: true}
}

func (v NullableServiceReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


