/*
Nextlinux Engine API Server

This is the Nextlinux Engine API. Provides the primary external API for users of the service.

API version: 0.6.0
Contact: nurmi@nextlinux.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package engine

import (
	"encoding/json"
)

// UserCreationRequest A payload for creating a new user, includes the username and password in a single request
type UserCreationRequest struct {
	// The username to create
	Username string `json:"username"`
	// The initial password for the user, must be at least 6 characters, up to 128. This must be null when the user_type is not 'native'.
	Password *string `json:"password,omitempty"`
	// The user's type. A Native user authenticates using user/password log on. All other users will authenticate with an IDP.
	UserType *string `json:"user_type,omitempty"`
	// If the user is authenticating via an IDP, this is the name of the IDP. A 'native' user should have this set to null.
	IdpName *string `json:"idp_name,omitempty"`
}

// NewUserCreationRequest instantiates a new UserCreationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserCreationRequest(username string) *UserCreationRequest {
	this := UserCreationRequest{}
	this.Username = username
	return &this
}

// NewUserCreationRequestWithDefaults instantiates a new UserCreationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserCreationRequestWithDefaults() *UserCreationRequest {
	this := UserCreationRequest{}
	return &this
}

// GetUsername returns the Username field value
func (o *UserCreationRequest) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *UserCreationRequest) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *UserCreationRequest) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UserCreationRequest) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCreationRequest) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UserCreationRequest) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UserCreationRequest) SetPassword(v string) {
	o.Password = &v
}

// GetUserType returns the UserType field value if set, zero value otherwise.
func (o *UserCreationRequest) GetUserType() string {
	if o == nil || o.UserType == nil {
		var ret string
		return ret
	}
	return *o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCreationRequest) GetUserTypeOk() (*string, bool) {
	if o == nil || o.UserType == nil {
		return nil, false
	}
	return o.UserType, true
}

// HasUserType returns a boolean if a field has been set.
func (o *UserCreationRequest) HasUserType() bool {
	if o != nil && o.UserType != nil {
		return true
	}

	return false
}

// SetUserType gets a reference to the given string and assigns it to the UserType field.
func (o *UserCreationRequest) SetUserType(v string) {
	o.UserType = &v
}

// GetIdpName returns the IdpName field value if set, zero value otherwise.
func (o *UserCreationRequest) GetIdpName() string {
	if o == nil || o.IdpName == nil {
		var ret string
		return ret
	}
	return *o.IdpName
}

// GetIdpNameOk returns a tuple with the IdpName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCreationRequest) GetIdpNameOk() (*string, bool) {
	if o == nil || o.IdpName == nil {
		return nil, false
	}
	return o.IdpName, true
}

// HasIdpName returns a boolean if a field has been set.
func (o *UserCreationRequest) HasIdpName() bool {
	if o != nil && o.IdpName != nil {
		return true
	}

	return false
}

// SetIdpName gets a reference to the given string and assigns it to the IdpName field.
func (o *UserCreationRequest) SetIdpName(v string) {
	o.IdpName = &v
}

func (o UserCreationRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["username"] = o.Username
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.UserType != nil {
		toSerialize["user_type"] = o.UserType
	}
	if o.IdpName != nil {
		toSerialize["idp_name"] = o.IdpName
	}
	return json.Marshal(toSerialize)
}

type NullableUserCreationRequest struct {
	value *UserCreationRequest
	isSet bool
}

func (v NullableUserCreationRequest) Get() *UserCreationRequest {
	return v.value
}

func (v *NullableUserCreationRequest) Set(val *UserCreationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserCreationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserCreationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserCreationRequest(val *UserCreationRequest) *NullableUserCreationRequest {
	return &NullableUserCreationRequest{value: val, isSet: true}
}

func (v NullableUserCreationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserCreationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


