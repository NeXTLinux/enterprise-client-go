/*
Nextlinux Enterprise API Server

This is the Nextlinux Enterprise API. It provides additional external API routes and functionality for enterprise users.

API version: 0.2.1
Contact: dev@nextlinux.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package external

import (
	"encoding/json"
	"time"
)

// SourceImportMetadata struct for SourceImportMetadata
type SourceImportMetadata struct {
	CiWorkflowName *string `json:"ci_workflow_name,omitempty"`
	CiWorkflowExecutionTime *time.Time `json:"ci_workflow_execution_time,omitempty"`
	Host *string `json:"host,omitempty"`
	RepositoryName *string `json:"repository_name,omitempty"`
	BranchName *string `json:"branch_name,omitempty"`
	Revision *string `json:"revision,omitempty"`
	ChangeAuthor *string `json:"change_author,omitempty"`
	Contents *SourceImportMetadataContents `json:"contents,omitempty"`
}

// NewSourceImportMetadata instantiates a new SourceImportMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceImportMetadata() *SourceImportMetadata {
	this := SourceImportMetadata{}
	return &this
}

// NewSourceImportMetadataWithDefaults instantiates a new SourceImportMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceImportMetadataWithDefaults() *SourceImportMetadata {
	this := SourceImportMetadata{}
	return &this
}

// GetCiWorkflowName returns the CiWorkflowName field value if set, zero value otherwise.
func (o *SourceImportMetadata) GetCiWorkflowName() string {
	if o == nil || o.CiWorkflowName == nil {
		var ret string
		return ret
	}
	return *o.CiWorkflowName
}

// GetCiWorkflowNameOk returns a tuple with the CiWorkflowName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceImportMetadata) GetCiWorkflowNameOk() (*string, bool) {
	if o == nil || o.CiWorkflowName == nil {
		return nil, false
	}
	return o.CiWorkflowName, true
}

// HasCiWorkflowName returns a boolean if a field has been set.
func (o *SourceImportMetadata) HasCiWorkflowName() bool {
	if o != nil && o.CiWorkflowName != nil {
		return true
	}

	return false
}

// SetCiWorkflowName gets a reference to the given string and assigns it to the CiWorkflowName field.
func (o *SourceImportMetadata) SetCiWorkflowName(v string) {
	o.CiWorkflowName = &v
}

// GetCiWorkflowExecutionTime returns the CiWorkflowExecutionTime field value if set, zero value otherwise.
func (o *SourceImportMetadata) GetCiWorkflowExecutionTime() time.Time {
	if o == nil || o.CiWorkflowExecutionTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CiWorkflowExecutionTime
}

// GetCiWorkflowExecutionTimeOk returns a tuple with the CiWorkflowExecutionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceImportMetadata) GetCiWorkflowExecutionTimeOk() (*time.Time, bool) {
	if o == nil || o.CiWorkflowExecutionTime == nil {
		return nil, false
	}
	return o.CiWorkflowExecutionTime, true
}

// HasCiWorkflowExecutionTime returns a boolean if a field has been set.
func (o *SourceImportMetadata) HasCiWorkflowExecutionTime() bool {
	if o != nil && o.CiWorkflowExecutionTime != nil {
		return true
	}

	return false
}

// SetCiWorkflowExecutionTime gets a reference to the given time.Time and assigns it to the CiWorkflowExecutionTime field.
func (o *SourceImportMetadata) SetCiWorkflowExecutionTime(v time.Time) {
	o.CiWorkflowExecutionTime = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *SourceImportMetadata) GetHost() string {
	if o == nil || o.Host == nil {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceImportMetadata) GetHostOk() (*string, bool) {
	if o == nil || o.Host == nil {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *SourceImportMetadata) HasHost() bool {
	if o != nil && o.Host != nil {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *SourceImportMetadata) SetHost(v string) {
	o.Host = &v
}

// GetRepositoryName returns the RepositoryName field value if set, zero value otherwise.
func (o *SourceImportMetadata) GetRepositoryName() string {
	if o == nil || o.RepositoryName == nil {
		var ret string
		return ret
	}
	return *o.RepositoryName
}

// GetRepositoryNameOk returns a tuple with the RepositoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceImportMetadata) GetRepositoryNameOk() (*string, bool) {
	if o == nil || o.RepositoryName == nil {
		return nil, false
	}
	return o.RepositoryName, true
}

// HasRepositoryName returns a boolean if a field has been set.
func (o *SourceImportMetadata) HasRepositoryName() bool {
	if o != nil && o.RepositoryName != nil {
		return true
	}

	return false
}

// SetRepositoryName gets a reference to the given string and assigns it to the RepositoryName field.
func (o *SourceImportMetadata) SetRepositoryName(v string) {
	o.RepositoryName = &v
}

// GetBranchName returns the BranchName field value if set, zero value otherwise.
func (o *SourceImportMetadata) GetBranchName() string {
	if o == nil || o.BranchName == nil {
		var ret string
		return ret
	}
	return *o.BranchName
}

// GetBranchNameOk returns a tuple with the BranchName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceImportMetadata) GetBranchNameOk() (*string, bool) {
	if o == nil || o.BranchName == nil {
		return nil, false
	}
	return o.BranchName, true
}

// HasBranchName returns a boolean if a field has been set.
func (o *SourceImportMetadata) HasBranchName() bool {
	if o != nil && o.BranchName != nil {
		return true
	}

	return false
}

// SetBranchName gets a reference to the given string and assigns it to the BranchName field.
func (o *SourceImportMetadata) SetBranchName(v string) {
	o.BranchName = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *SourceImportMetadata) GetRevision() string {
	if o == nil || o.Revision == nil {
		var ret string
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceImportMetadata) GetRevisionOk() (*string, bool) {
	if o == nil || o.Revision == nil {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *SourceImportMetadata) HasRevision() bool {
	if o != nil && o.Revision != nil {
		return true
	}

	return false
}

// SetRevision gets a reference to the given string and assigns it to the Revision field.
func (o *SourceImportMetadata) SetRevision(v string) {
	o.Revision = &v
}

// GetChangeAuthor returns the ChangeAuthor field value if set, zero value otherwise.
func (o *SourceImportMetadata) GetChangeAuthor() string {
	if o == nil || o.ChangeAuthor == nil {
		var ret string
		return ret
	}
	return *o.ChangeAuthor
}

// GetChangeAuthorOk returns a tuple with the ChangeAuthor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceImportMetadata) GetChangeAuthorOk() (*string, bool) {
	if o == nil || o.ChangeAuthor == nil {
		return nil, false
	}
	return o.ChangeAuthor, true
}

// HasChangeAuthor returns a boolean if a field has been set.
func (o *SourceImportMetadata) HasChangeAuthor() bool {
	if o != nil && o.ChangeAuthor != nil {
		return true
	}

	return false
}

// SetChangeAuthor gets a reference to the given string and assigns it to the ChangeAuthor field.
func (o *SourceImportMetadata) SetChangeAuthor(v string) {
	o.ChangeAuthor = &v
}

// GetContents returns the Contents field value if set, zero value otherwise.
func (o *SourceImportMetadata) GetContents() SourceImportMetadataContents {
	if o == nil || o.Contents == nil {
		var ret SourceImportMetadataContents
		return ret
	}
	return *o.Contents
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceImportMetadata) GetContentsOk() (*SourceImportMetadataContents, bool) {
	if o == nil || o.Contents == nil {
		return nil, false
	}
	return o.Contents, true
}

// HasContents returns a boolean if a field has been set.
func (o *SourceImportMetadata) HasContents() bool {
	if o != nil && o.Contents != nil {
		return true
	}

	return false
}

// SetContents gets a reference to the given SourceImportMetadataContents and assigns it to the Contents field.
func (o *SourceImportMetadata) SetContents(v SourceImportMetadataContents) {
	o.Contents = &v
}

func (o SourceImportMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CiWorkflowName != nil {
		toSerialize["ci_workflow_name"] = o.CiWorkflowName
	}
	if o.CiWorkflowExecutionTime != nil {
		toSerialize["ci_workflow_execution_time"] = o.CiWorkflowExecutionTime
	}
	if o.Host != nil {
		toSerialize["host"] = o.Host
	}
	if o.RepositoryName != nil {
		toSerialize["repository_name"] = o.RepositoryName
	}
	if o.BranchName != nil {
		toSerialize["branch_name"] = o.BranchName
	}
	if o.Revision != nil {
		toSerialize["revision"] = o.Revision
	}
	if o.ChangeAuthor != nil {
		toSerialize["change_author"] = o.ChangeAuthor
	}
	if o.Contents != nil {
		toSerialize["contents"] = o.Contents
	}
	return json.Marshal(toSerialize)
}

type NullableSourceImportMetadata struct {
	value *SourceImportMetadata
	isSet bool
}

func (v NullableSourceImportMetadata) Get() *SourceImportMetadata {
	return v.value
}

func (v *NullableSourceImportMetadata) Set(val *SourceImportMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceImportMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceImportMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceImportMetadata(val *SourceImportMetadata) *NullableSourceImportMetadata {
	return &NullableSourceImportMetadata{value: val, isSet: true}
}

func (v NullableSourceImportMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceImportMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


