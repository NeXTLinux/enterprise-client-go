/*
Nextlinux Enterprise RBAC API

Enterprise API for managing roles, permissions, and user mappings

API version: 0.1.0
Contact: dev@nextlinux.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
	"time"
)

// RoleMember A mapping between a username and a role with an account context
type RoleMember struct {
	Username string `json:"username"`
	ForAccount string `json:"for_account"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
}

// NewRoleMember instantiates a new RoleMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleMember(username string, forAccount string) *RoleMember {
	this := RoleMember{}
	this.Username = username
	this.ForAccount = forAccount
	return &this
}

// NewRoleMemberWithDefaults instantiates a new RoleMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleMemberWithDefaults() *RoleMember {
	this := RoleMember{}
	return &this
}

// GetUsername returns the Username field value
func (o *RoleMember) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *RoleMember) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *RoleMember) SetUsername(v string) {
	o.Username = v
}

// GetForAccount returns the ForAccount field value
func (o *RoleMember) GetForAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ForAccount
}

// GetForAccountOk returns a tuple with the ForAccount field value
// and a boolean to check if the value has been set.
func (o *RoleMember) GetForAccountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ForAccount, true
}

// SetForAccount sets field value
func (o *RoleMember) SetForAccount(v string) {
	o.ForAccount = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *RoleMember) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMember) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *RoleMember) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *RoleMember) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

func (o RoleMember) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["username"] = o.Username
	}
	if true {
		toSerialize["for_account"] = o.ForAccount
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableRoleMember struct {
	value *RoleMember
	isSet bool
}

func (v NullableRoleMember) Get() *RoleMember {
	return v.value
}

func (v *NullableRoleMember) Set(val *RoleMember) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleMember) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleMember(val *RoleMember) *NullableRoleMember {
	return &NullableRoleMember{value: val, isSet: true}
}

func (v NullableRoleMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


