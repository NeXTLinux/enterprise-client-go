/*
Nextlinux Enterprise RBAC API

Enterprise API for managing roles, permissions, and user mappings

API version: 0.1.0
Contact: dev@nextlinux.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rbac

import (
	"encoding/json"
)

// AccountRole An account identifier and roles a user has within that account
type AccountRole struct {
	// The account scope that applies to the set of roles
	ForAccount *string `json:"for_account,omitempty"`
	Roles *Role `json:"roles,omitempty"`
}

// NewAccountRole instantiates a new AccountRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountRole() *AccountRole {
	this := AccountRole{}
	return &this
}

// NewAccountRoleWithDefaults instantiates a new AccountRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountRoleWithDefaults() *AccountRole {
	this := AccountRole{}
	return &this
}

// GetForAccount returns the ForAccount field value if set, zero value otherwise.
func (o *AccountRole) GetForAccount() string {
	if o == nil || o.ForAccount == nil {
		var ret string
		return ret
	}
	return *o.ForAccount
}

// GetForAccountOk returns a tuple with the ForAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountRole) GetForAccountOk() (*string, bool) {
	if o == nil || o.ForAccount == nil {
		return nil, false
	}
	return o.ForAccount, true
}

// HasForAccount returns a boolean if a field has been set.
func (o *AccountRole) HasForAccount() bool {
	if o != nil && o.ForAccount != nil {
		return true
	}

	return false
}

// SetForAccount gets a reference to the given string and assigns it to the ForAccount field.
func (o *AccountRole) SetForAccount(v string) {
	o.ForAccount = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *AccountRole) GetRoles() Role {
	if o == nil || o.Roles == nil {
		var ret Role
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountRole) GetRolesOk() (*Role, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *AccountRole) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given Role and assigns it to the Roles field.
func (o *AccountRole) SetRoles(v Role) {
	o.Roles = &v
}

func (o AccountRole) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ForAccount != nil {
		toSerialize["for_account"] = o.ForAccount
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	return json.Marshal(toSerialize)
}

type NullableAccountRole struct {
	value *AccountRole
	isSet bool
}

func (v NullableAccountRole) Get() *AccountRole {
	return v.value
}

func (v *NullableAccountRole) Set(val *AccountRole) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountRole) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountRole(val *AccountRole) *NullableAccountRole {
	return &NullableAccountRole{value: val, isSet: true}
}

func (v NullableAccountRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


