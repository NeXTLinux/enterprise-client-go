/*
Nextlinux Enterprise API Server

This is the Nextlinux Enterprise API. It provides additional external API routes and functionality for enterprise users.

API version: 0.7.0
Contact: dev@nextlinux.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enterprise

import (
	"encoding/json"
	"time"
)

// ECSInventory struct for ECSInventory
type ECSInventory struct {
	ClusterName string `json:"cluster_name"`
	Timestamp time.Time `json:"timestamp"`
	Tasks []ECSInventoryTasks `json:"tasks,omitempty"`
	Containers *[]ECSInventoryContainers `json:"containers,omitempty"`
}

// NewECSInventory instantiates a new ECSInventory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewECSInventory(clusterName string, timestamp time.Time) *ECSInventory {
	this := ECSInventory{}
	this.ClusterName = clusterName
	this.Timestamp = timestamp
	return &this
}

// NewECSInventoryWithDefaults instantiates a new ECSInventory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewECSInventoryWithDefaults() *ECSInventory {
	this := ECSInventory{}
	return &this
}

// GetClusterName returns the ClusterName field value
func (o *ECSInventory) GetClusterName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value
// and a boolean to check if the value has been set.
func (o *ECSInventory) GetClusterNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ClusterName, true
}

// SetClusterName sets field value
func (o *ECSInventory) SetClusterName(v string) {
	o.ClusterName = v
}

// GetTimestamp returns the Timestamp field value
func (o *ECSInventory) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *ECSInventory) GetTimestampOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *ECSInventory) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetTasks returns the Tasks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ECSInventory) GetTasks() []ECSInventoryTasks {
	if o == nil  {
		var ret []ECSInventoryTasks
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ECSInventory) GetTasksOk() (*[]ECSInventoryTasks, bool) {
	if o == nil || o.Tasks == nil {
		return nil, false
	}
	return &o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *ECSInventory) HasTasks() bool {
	if o != nil && o.Tasks != nil {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []ECSInventoryTasks and assigns it to the Tasks field.
func (o *ECSInventory) SetTasks(v []ECSInventoryTasks) {
	o.Tasks = v
}

// GetContainers returns the Containers field value if set, zero value otherwise.
func (o *ECSInventory) GetContainers() []ECSInventoryContainers {
	if o == nil || o.Containers == nil {
		var ret []ECSInventoryContainers
		return ret
	}
	return *o.Containers
}

// GetContainersOk returns a tuple with the Containers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECSInventory) GetContainersOk() (*[]ECSInventoryContainers, bool) {
	if o == nil || o.Containers == nil {
		return nil, false
	}
	return o.Containers, true
}

// HasContainers returns a boolean if a field has been set.
func (o *ECSInventory) HasContainers() bool {
	if o != nil && o.Containers != nil {
		return true
	}

	return false
}

// SetContainers gets a reference to the given []ECSInventoryContainers and assigns it to the Containers field.
func (o *ECSInventory) SetContainers(v []ECSInventoryContainers) {
	o.Containers = &v
}

func (o ECSInventory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cluster_name"] = o.ClusterName
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Tasks != nil {
		toSerialize["tasks"] = o.Tasks
	}
	if o.Containers != nil {
		toSerialize["containers"] = o.Containers
	}
	return json.Marshal(toSerialize)
}

type NullableECSInventory struct {
	value *ECSInventory
	isSet bool
}

func (v NullableECSInventory) Get() *ECSInventory {
	return v.value
}

func (v *NullableECSInventory) Set(val *ECSInventory) {
	v.value = val
	v.isSet = true
}

func (v NullableECSInventory) IsSet() bool {
	return v.isSet
}

func (v *NullableECSInventory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableECSInventory(val *ECSInventory) *NullableECSInventory {
	return &NullableECSInventory{value: val, isSet: true}
}

func (v NullableECSInventory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableECSInventory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


