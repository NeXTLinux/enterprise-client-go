/*
Nextlinux Enterprise API Server

This is the Nextlinux Enterprise API. It provides additional external API routes and functionality for enterprise users.

API version: 0.7.0
Contact: dev@nextlinux.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enterprise

import (
	"encoding/json"
)

// VersionVulnerability A vulnerability in an application version vulnerability report with vulenrability data, affected artifacts, and packages
type VersionVulnerability struct {
	// The vulnerability id for the match
	Id *string `json:"id,omitempty"`
	Nvd *[]VersionVulnerabilityNVD `json:"nvd,omitempty"`
	VendorData *VersionVulnerabilityVendor `json:"vendor_data,omitempty"`
	Matches *[]VersionVulnerabilityMatch `json:"matches,omitempty"`
}

// NewVersionVulnerability instantiates a new VersionVulnerability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionVulnerability() *VersionVulnerability {
	this := VersionVulnerability{}
	return &this
}

// NewVersionVulnerabilityWithDefaults instantiates a new VersionVulnerability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionVulnerabilityWithDefaults() *VersionVulnerability {
	this := VersionVulnerability{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VersionVulnerability) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVulnerability) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VersionVulnerability) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VersionVulnerability) SetId(v string) {
	o.Id = &v
}

// GetNvd returns the Nvd field value if set, zero value otherwise.
func (o *VersionVulnerability) GetNvd() []VersionVulnerabilityNVD {
	if o == nil || o.Nvd == nil {
		var ret []VersionVulnerabilityNVD
		return ret
	}
	return *o.Nvd
}

// GetNvdOk returns a tuple with the Nvd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVulnerability) GetNvdOk() (*[]VersionVulnerabilityNVD, bool) {
	if o == nil || o.Nvd == nil {
		return nil, false
	}
	return o.Nvd, true
}

// HasNvd returns a boolean if a field has been set.
func (o *VersionVulnerability) HasNvd() bool {
	if o != nil && o.Nvd != nil {
		return true
	}

	return false
}

// SetNvd gets a reference to the given []VersionVulnerabilityNVD and assigns it to the Nvd field.
func (o *VersionVulnerability) SetNvd(v []VersionVulnerabilityNVD) {
	o.Nvd = &v
}

// GetVendorData returns the VendorData field value if set, zero value otherwise.
func (o *VersionVulnerability) GetVendorData() VersionVulnerabilityVendor {
	if o == nil || o.VendorData == nil {
		var ret VersionVulnerabilityVendor
		return ret
	}
	return *o.VendorData
}

// GetVendorDataOk returns a tuple with the VendorData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVulnerability) GetVendorDataOk() (*VersionVulnerabilityVendor, bool) {
	if o == nil || o.VendorData == nil {
		return nil, false
	}
	return o.VendorData, true
}

// HasVendorData returns a boolean if a field has been set.
func (o *VersionVulnerability) HasVendorData() bool {
	if o != nil && o.VendorData != nil {
		return true
	}

	return false
}

// SetVendorData gets a reference to the given VersionVulnerabilityVendor and assigns it to the VendorData field.
func (o *VersionVulnerability) SetVendorData(v VersionVulnerabilityVendor) {
	o.VendorData = &v
}

// GetMatches returns the Matches field value if set, zero value otherwise.
func (o *VersionVulnerability) GetMatches() []VersionVulnerabilityMatch {
	if o == nil || o.Matches == nil {
		var ret []VersionVulnerabilityMatch
		return ret
	}
	return *o.Matches
}

// GetMatchesOk returns a tuple with the Matches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVulnerability) GetMatchesOk() (*[]VersionVulnerabilityMatch, bool) {
	if o == nil || o.Matches == nil {
		return nil, false
	}
	return o.Matches, true
}

// HasMatches returns a boolean if a field has been set.
func (o *VersionVulnerability) HasMatches() bool {
	if o != nil && o.Matches != nil {
		return true
	}

	return false
}

// SetMatches gets a reference to the given []VersionVulnerabilityMatch and assigns it to the Matches field.
func (o *VersionVulnerability) SetMatches(v []VersionVulnerabilityMatch) {
	o.Matches = &v
}

func (o VersionVulnerability) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Nvd != nil {
		toSerialize["nvd"] = o.Nvd
	}
	if o.VendorData != nil {
		toSerialize["vendor_data"] = o.VendorData
	}
	if o.Matches != nil {
		toSerialize["matches"] = o.Matches
	}
	return json.Marshal(toSerialize)
}

type NullableVersionVulnerability struct {
	value *VersionVulnerability
	isSet bool
}

func (v NullableVersionVulnerability) Get() *VersionVulnerability {
	return v.value
}

func (v *NullableVersionVulnerability) Set(val *VersionVulnerability) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionVulnerability) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionVulnerability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionVulnerability(val *VersionVulnerability) *NullableVersionVulnerability {
	return &NullableVersionVulnerability{value: val, isSet: true}
}

func (v NullableVersionVulnerability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionVulnerability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


