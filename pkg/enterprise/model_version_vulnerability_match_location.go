/*
Nextlinux Enterprise API Server

This is the Nextlinux Enterprise API. It provides additional external API routes and functionality for enterprise users.

API version: 0.7.0
Contact: dev@nextlinux.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enterprise

import (
	"encoding/json"
)

// VersionVulnerabilityMatchLocation The location of the match, which includes both the package and the artifact it belongs to
type VersionVulnerabilityMatchLocation struct {
	Artifact *VersionVulnerabilityMatchLocationArtifact `json:"artifact,omitempty"`
	Package *VersionVulnerabilityMatchLocationPackage `json:"package,omitempty"`
}

// NewVersionVulnerabilityMatchLocation instantiates a new VersionVulnerabilityMatchLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionVulnerabilityMatchLocation() *VersionVulnerabilityMatchLocation {
	this := VersionVulnerabilityMatchLocation{}
	return &this
}

// NewVersionVulnerabilityMatchLocationWithDefaults instantiates a new VersionVulnerabilityMatchLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionVulnerabilityMatchLocationWithDefaults() *VersionVulnerabilityMatchLocation {
	this := VersionVulnerabilityMatchLocation{}
	return &this
}

// GetArtifact returns the Artifact field value if set, zero value otherwise.
func (o *VersionVulnerabilityMatchLocation) GetArtifact() VersionVulnerabilityMatchLocationArtifact {
	if o == nil || o.Artifact == nil {
		var ret VersionVulnerabilityMatchLocationArtifact
		return ret
	}
	return *o.Artifact
}

// GetArtifactOk returns a tuple with the Artifact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVulnerabilityMatchLocation) GetArtifactOk() (*VersionVulnerabilityMatchLocationArtifact, bool) {
	if o == nil || o.Artifact == nil {
		return nil, false
	}
	return o.Artifact, true
}

// HasArtifact returns a boolean if a field has been set.
func (o *VersionVulnerabilityMatchLocation) HasArtifact() bool {
	if o != nil && o.Artifact != nil {
		return true
	}

	return false
}

// SetArtifact gets a reference to the given VersionVulnerabilityMatchLocationArtifact and assigns it to the Artifact field.
func (o *VersionVulnerabilityMatchLocation) SetArtifact(v VersionVulnerabilityMatchLocationArtifact) {
	o.Artifact = &v
}

// GetPackage returns the Package field value if set, zero value otherwise.
func (o *VersionVulnerabilityMatchLocation) GetPackage() VersionVulnerabilityMatchLocationPackage {
	if o == nil || o.Package == nil {
		var ret VersionVulnerabilityMatchLocationPackage
		return ret
	}
	return *o.Package
}

// GetPackageOk returns a tuple with the Package field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVulnerabilityMatchLocation) GetPackageOk() (*VersionVulnerabilityMatchLocationPackage, bool) {
	if o == nil || o.Package == nil {
		return nil, false
	}
	return o.Package, true
}

// HasPackage returns a boolean if a field has been set.
func (o *VersionVulnerabilityMatchLocation) HasPackage() bool {
	if o != nil && o.Package != nil {
		return true
	}

	return false
}

// SetPackage gets a reference to the given VersionVulnerabilityMatchLocationPackage and assigns it to the Package field.
func (o *VersionVulnerabilityMatchLocation) SetPackage(v VersionVulnerabilityMatchLocationPackage) {
	o.Package = &v
}

func (o VersionVulnerabilityMatchLocation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Artifact != nil {
		toSerialize["artifact"] = o.Artifact
	}
	if o.Package != nil {
		toSerialize["package"] = o.Package
	}
	return json.Marshal(toSerialize)
}

type NullableVersionVulnerabilityMatchLocation struct {
	value *VersionVulnerabilityMatchLocation
	isSet bool
}

func (v NullableVersionVulnerabilityMatchLocation) Get() *VersionVulnerabilityMatchLocation {
	return v.value
}

func (v *NullableVersionVulnerabilityMatchLocation) Set(val *VersionVulnerabilityMatchLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionVulnerabilityMatchLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionVulnerabilityMatchLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionVulnerabilityMatchLocation(val *VersionVulnerabilityMatchLocation) *NullableVersionVulnerabilityMatchLocation {
	return &NullableVersionVulnerabilityMatchLocation{value: val, isSet: true}
}

func (v NullableVersionVulnerabilityMatchLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionVulnerabilityMatchLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


