/*
Nextlinux Enterprise API Server

This is the Nextlinux Enterprise API. It provides additional external API routes and functionality for enterprise users.

API version: 0.7.0
Contact: dev@nextlinux.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enterprise

import (
	"encoding/json"
)

// KubernetesInventoryPods struct for KubernetesInventoryPods
type KubernetesInventoryPods struct {
	Uid string `json:"uid"`
	Name string `json:"name"`
	NamespaceUid *string `json:"namespace_uid,omitempty"`
	NodeUid *string `json:"node_uid,omitempty"`
	Labels *map[string]string `json:"labels,omitempty"`
	Annotations *map[string]string `json:"annotations,omitempty"`
}

// NewKubernetesInventoryPods instantiates a new KubernetesInventoryPods object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesInventoryPods(uid string, name string) *KubernetesInventoryPods {
	this := KubernetesInventoryPods{}
	this.Uid = uid
	this.Name = name
	return &this
}

// NewKubernetesInventoryPodsWithDefaults instantiates a new KubernetesInventoryPods object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesInventoryPodsWithDefaults() *KubernetesInventoryPods {
	this := KubernetesInventoryPods{}
	return &this
}

// GetUid returns the Uid field value
func (o *KubernetesInventoryPods) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *KubernetesInventoryPods) GetUidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *KubernetesInventoryPods) SetUid(v string) {
	o.Uid = v
}

// GetName returns the Name field value
func (o *KubernetesInventoryPods) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *KubernetesInventoryPods) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *KubernetesInventoryPods) SetName(v string) {
	o.Name = v
}

// GetNamespaceUid returns the NamespaceUid field value if set, zero value otherwise.
func (o *KubernetesInventoryPods) GetNamespaceUid() string {
	if o == nil || o.NamespaceUid == nil {
		var ret string
		return ret
	}
	return *o.NamespaceUid
}

// GetNamespaceUidOk returns a tuple with the NamespaceUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesInventoryPods) GetNamespaceUidOk() (*string, bool) {
	if o == nil || o.NamespaceUid == nil {
		return nil, false
	}
	return o.NamespaceUid, true
}

// HasNamespaceUid returns a boolean if a field has been set.
func (o *KubernetesInventoryPods) HasNamespaceUid() bool {
	if o != nil && o.NamespaceUid != nil {
		return true
	}

	return false
}

// SetNamespaceUid gets a reference to the given string and assigns it to the NamespaceUid field.
func (o *KubernetesInventoryPods) SetNamespaceUid(v string) {
	o.NamespaceUid = &v
}

// GetNodeUid returns the NodeUid field value if set, zero value otherwise.
func (o *KubernetesInventoryPods) GetNodeUid() string {
	if o == nil || o.NodeUid == nil {
		var ret string
		return ret
	}
	return *o.NodeUid
}

// GetNodeUidOk returns a tuple with the NodeUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesInventoryPods) GetNodeUidOk() (*string, bool) {
	if o == nil || o.NodeUid == nil {
		return nil, false
	}
	return o.NodeUid, true
}

// HasNodeUid returns a boolean if a field has been set.
func (o *KubernetesInventoryPods) HasNodeUid() bool {
	if o != nil && o.NodeUid != nil {
		return true
	}

	return false
}

// SetNodeUid gets a reference to the given string and assigns it to the NodeUid field.
func (o *KubernetesInventoryPods) SetNodeUid(v string) {
	o.NodeUid = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *KubernetesInventoryPods) GetLabels() map[string]string {
	if o == nil || o.Labels == nil {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesInventoryPods) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *KubernetesInventoryPods) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *KubernetesInventoryPods) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *KubernetesInventoryPods) GetAnnotations() map[string]string {
	if o == nil || o.Annotations == nil {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesInventoryPods) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || o.Annotations == nil {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *KubernetesInventoryPods) HasAnnotations() bool {
	if o != nil && o.Annotations != nil {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *KubernetesInventoryPods) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

func (o KubernetesInventoryPods) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uid"] = o.Uid
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.NamespaceUid != nil {
		toSerialize["namespace_uid"] = o.NamespaceUid
	}
	if o.NodeUid != nil {
		toSerialize["node_uid"] = o.NodeUid
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.Annotations != nil {
		toSerialize["annotations"] = o.Annotations
	}
	return json.Marshal(toSerialize)
}

type NullableKubernetesInventoryPods struct {
	value *KubernetesInventoryPods
	isSet bool
}

func (v NullableKubernetesInventoryPods) Get() *KubernetesInventoryPods {
	return v.value
}

func (v *NullableKubernetesInventoryPods) Set(val *KubernetesInventoryPods) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesInventoryPods) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesInventoryPods) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesInventoryPods(val *KubernetesInventoryPods) *NullableKubernetesInventoryPods {
	return &NullableKubernetesInventoryPods{value: val, isSet: true}
}

func (v NullableKubernetesInventoryPods) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesInventoryPods) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


