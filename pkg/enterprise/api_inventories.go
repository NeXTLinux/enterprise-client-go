/*
Anchore Enterprise API Server

This is the Anchore Enterprise API. It provides additional external API routes and functionality for enterprise users.

API version: 0.2.1
Contact: dev@nextlinux.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enterprise

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type InventoriesApi interface {

	/*
	AddInventoryCluster Create a cluster inventory

	Create a new cluster inventory with the provided configuration

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiAddInventoryClusterRequest
	*/
	AddInventoryCluster(ctx _context.Context) ApiAddInventoryClusterRequest

	// AddInventoryClusterExecute executes the request
	//  @return InventoryCluster
	AddInventoryClusterExecute(r ApiAddInventoryClusterRequest) (InventoryCluster, *_nethttp.Response, error)

	/*
	DelInventoryClusterByName Delete a configured inventory clusters by cluster_name

	Removes a configured cluster for reporting image inventory by cluster_name

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param clusterName
	 @return ApiDelInventoryClusterByNameRequest
	*/
	DelInventoryClusterByName(ctx _context.Context, clusterName string) ApiDelInventoryClusterByNameRequest

	// DelInventoryClusterByNameExecute executes the request
	DelInventoryClusterByNameExecute(r ApiDelInventoryClusterByNameRequest) (*_nethttp.Response, error)

	/*
	GetImageInventory Return a list of the images in inventories for this account

	Returns a list of the images that are in use

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiGetImageInventoryRequest
	*/
	GetImageInventory(ctx _context.Context) ApiGetImageInventoryRequest

	// GetImageInventoryExecute executes the request
	//  @return []InventoryItem
	GetImageInventoryExecute(r ApiGetImageInventoryRequest) ([]InventoryItem, *_nethttp.Response, error)

	/*
	GetInventoryClusterByName Return a configured inventory cluster

	Returns a cluster that is configured for reporting image inventory

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param clusterName
	 @return ApiGetInventoryClusterByNameRequest
	*/
	GetInventoryClusterByName(ctx _context.Context, clusterName string) ApiGetInventoryClusterByNameRequest

	// GetInventoryClusterByNameExecute executes the request
	//  @return InventoryCluster
	GetInventoryClusterByNameExecute(r ApiGetInventoryClusterByNameRequest) (InventoryCluster, *_nethttp.Response, error)

	/*
	ListInventoryClusters Return a list of the configured inventory clusters

	Returns a filterable list of the clusters that are configured for reporting image inventory

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiListInventoryClustersRequest
	*/
	ListInventoryClusters(ctx _context.Context) ApiListInventoryClustersRequest

	// ListInventoryClustersExecute executes the request
	//  @return []InventoryCluster
	ListInventoryClustersExecute(r ApiListInventoryClustersRequest) ([]InventoryCluster, *_nethttp.Response, error)

	/*
	SyncImageInventory synchronizes the list of the images in a given cluster for the inventory

	synchronizes the list of the images that are in use

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiSyncImageInventoryRequest
	*/
	SyncImageInventory(ctx _context.Context) ApiSyncImageInventoryRequest

	// SyncImageInventoryExecute executes the request
	//  @return []InventoryItem
	SyncImageInventoryExecute(r ApiSyncImageInventoryRequest) ([]InventoryItem, *_nethttp.Response, error)
}

// InventoriesApiService InventoriesApi service
type InventoriesApiService service

type ApiAddInventoryClusterRequest struct {
	ctx _context.Context
	ApiService InventoriesApi
	cluster *InventoryCluster
	xAnchoreAccount *string
}

func (r ApiAddInventoryClusterRequest) Cluster(cluster InventoryCluster) ApiAddInventoryClusterRequest {
	r.cluster = &cluster
	return r
}
// An account name to change the resource scope of the request to that account, if permissions allow (admin only)
func (r ApiAddInventoryClusterRequest) XAnchoreAccount(xAnchoreAccount string) ApiAddInventoryClusterRequest {
	r.xAnchoreAccount = &xAnchoreAccount
	return r
}

func (r ApiAddInventoryClusterRequest) Execute() (InventoryCluster, *_nethttp.Response, error) {
	return r.ApiService.AddInventoryClusterExecute(r)
}

/*
AddInventoryCluster Create a cluster inventory

Create a new cluster inventory with the provided configuration

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAddInventoryClusterRequest
*/
func (a *InventoriesApiService) AddInventoryCluster(ctx _context.Context) ApiAddInventoryClusterRequest {
	return ApiAddInventoryClusterRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InventoryCluster
func (a *InventoriesApiService) AddInventoryClusterExecute(r ApiAddInventoryClusterRequest) (InventoryCluster, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InventoryCluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoriesApiService.AddInventoryCluster")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/inventories/clusters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.cluster == nil {
		return localVarReturnValue, nil, reportError("cluster is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAnchoreAccount != nil {
		localVarHeaderParams["x-nextlinux-account"] = parameterToString(*r.xAnchoreAccount, "")
	}
	// body params
	localVarPostBody = r.cluster
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDelInventoryClusterByNameRequest struct {
	ctx _context.Context
	ApiService InventoriesApi
	clusterName string
	xAnchoreAccount *string
}

// An account name to change the resource scope of the request to that account, if permissions allow (admin only)
func (r ApiDelInventoryClusterByNameRequest) XAnchoreAccount(xAnchoreAccount string) ApiDelInventoryClusterByNameRequest {
	r.xAnchoreAccount = &xAnchoreAccount
	return r
}

func (r ApiDelInventoryClusterByNameRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DelInventoryClusterByNameExecute(r)
}

/*
DelInventoryClusterByName Delete a configured inventory clusters by cluster_name

Removes a configured cluster for reporting image inventory by cluster_name

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clusterName
 @return ApiDelInventoryClusterByNameRequest
*/
func (a *InventoriesApiService) DelInventoryClusterByName(ctx _context.Context, clusterName string) ApiDelInventoryClusterByNameRequest {
	return ApiDelInventoryClusterByNameRequest{
		ApiService: a,
		ctx: ctx,
		clusterName: clusterName,
	}
}

// Execute executes the request
func (a *InventoriesApiService) DelInventoryClusterByNameExecute(r ApiDelInventoryClusterByNameRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoriesApiService.DelInventoryClusterByName")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/inventories/clusters/{cluster_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"cluster_name"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAnchoreAccount != nil {
		localVarHeaderParams["x-nextlinux-account"] = parameterToString(*r.xAnchoreAccount, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetImageInventoryRequest struct {
	ctx _context.Context
	ApiService InventoriesApi
	inventoryType *string
	imageDigest *string
	context *string
	xAnchoreAccount *string
}

func (r ApiGetImageInventoryRequest) InventoryType(inventoryType string) ApiGetImageInventoryRequest {
	r.inventoryType = &inventoryType
	return r
}
func (r ApiGetImageInventoryRequest) ImageDigest(imageDigest string) ApiGetImageInventoryRequest {
	r.imageDigest = &imageDigest
	return r
}
func (r ApiGetImageInventoryRequest) Context(context string) ApiGetImageInventoryRequest {
	r.context = &context
	return r
}
// An account name to change the resource scope of the request to that account, if permissions allow (admin only)
func (r ApiGetImageInventoryRequest) XAnchoreAccount(xAnchoreAccount string) ApiGetImageInventoryRequest {
	r.xAnchoreAccount = &xAnchoreAccount
	return r
}

func (r ApiGetImageInventoryRequest) Execute() ([]InventoryItem, *_nethttp.Response, error) {
	return r.ApiService.GetImageInventoryExecute(r)
}

/*
GetImageInventory Return a list of the images in inventories for this account

Returns a list of the images that are in use

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetImageInventoryRequest
*/
func (a *InventoriesApiService) GetImageInventory(ctx _context.Context) ApiGetImageInventoryRequest {
	return ApiGetImageInventoryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []InventoryItem
func (a *InventoriesApiService) GetImageInventoryExecute(r ApiGetImageInventoryRequest) ([]InventoryItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []InventoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoriesApiService.GetImageInventory")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/inventories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.inventoryType != nil {
		localVarQueryParams.Add("inventory_type", parameterToString(*r.inventoryType, ""))
	}
	if r.imageDigest != nil {
		localVarQueryParams.Add("image_digest", parameterToString(*r.imageDigest, ""))
	}
	if r.context != nil {
		localVarQueryParams.Add("context", parameterToString(*r.context, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAnchoreAccount != nil {
		localVarHeaderParams["x-nextlinux-account"] = parameterToString(*r.xAnchoreAccount, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetInventoryClusterByNameRequest struct {
	ctx _context.Context
	ApiService InventoriesApi
	clusterName string
	xAnchoreAccount *string
}

// An account name to change the resource scope of the request to that account, if permissions allow (admin only)
func (r ApiGetInventoryClusterByNameRequest) XAnchoreAccount(xAnchoreAccount string) ApiGetInventoryClusterByNameRequest {
	r.xAnchoreAccount = &xAnchoreAccount
	return r
}

func (r ApiGetInventoryClusterByNameRequest) Execute() (InventoryCluster, *_nethttp.Response, error) {
	return r.ApiService.GetInventoryClusterByNameExecute(r)
}

/*
GetInventoryClusterByName Return a configured inventory cluster

Returns a cluster that is configured for reporting image inventory

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clusterName
 @return ApiGetInventoryClusterByNameRequest
*/
func (a *InventoriesApiService) GetInventoryClusterByName(ctx _context.Context, clusterName string) ApiGetInventoryClusterByNameRequest {
	return ApiGetInventoryClusterByNameRequest{
		ApiService: a,
		ctx: ctx,
		clusterName: clusterName,
	}
}

// Execute executes the request
//  @return InventoryCluster
func (a *InventoriesApiService) GetInventoryClusterByNameExecute(r ApiGetInventoryClusterByNameRequest) (InventoryCluster, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InventoryCluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoriesApiService.GetInventoryClusterByName")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/inventories/clusters/{cluster_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"cluster_name"+"}", _neturl.PathEscape(parameterToString(r.clusterName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAnchoreAccount != nil {
		localVarHeaderParams["x-nextlinux-account"] = parameterToString(*r.xAnchoreAccount, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListInventoryClustersRequest struct {
	ctx _context.Context
	ApiService InventoriesApi
	inventoryType *string
	xAnchoreAccount *string
}

func (r ApiListInventoryClustersRequest) InventoryType(inventoryType string) ApiListInventoryClustersRequest {
	r.inventoryType = &inventoryType
	return r
}
// An account name to change the resource scope of the request to that account, if permissions allow (admin only)
func (r ApiListInventoryClustersRequest) XAnchoreAccount(xAnchoreAccount string) ApiListInventoryClustersRequest {
	r.xAnchoreAccount = &xAnchoreAccount
	return r
}

func (r ApiListInventoryClustersRequest) Execute() ([]InventoryCluster, *_nethttp.Response, error) {
	return r.ApiService.ListInventoryClustersExecute(r)
}

/*
ListInventoryClusters Return a list of the configured inventory clusters

Returns a filterable list of the clusters that are configured for reporting image inventory

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListInventoryClustersRequest
*/
func (a *InventoriesApiService) ListInventoryClusters(ctx _context.Context) ApiListInventoryClustersRequest {
	return ApiListInventoryClustersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []InventoryCluster
func (a *InventoriesApiService) ListInventoryClustersExecute(r ApiListInventoryClustersRequest) ([]InventoryCluster, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []InventoryCluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoriesApiService.ListInventoryClusters")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/inventories/clusters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.inventoryType != nil {
		localVarQueryParams.Add("inventory_type", parameterToString(*r.inventoryType, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAnchoreAccount != nil {
		localVarHeaderParams["x-nextlinux-account"] = parameterToString(*r.xAnchoreAccount, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSyncImageInventoryRequest struct {
	ctx _context.Context
	ApiService InventoriesApi
	inventory *InventoryReport
	xAnchoreAccount *string
}

func (r ApiSyncImageInventoryRequest) Inventory(inventory InventoryReport) ApiSyncImageInventoryRequest {
	r.inventory = &inventory
	return r
}
// An account name to change the resource scope of the request to that account, if permissions allow (admin only)
func (r ApiSyncImageInventoryRequest) XAnchoreAccount(xAnchoreAccount string) ApiSyncImageInventoryRequest {
	r.xAnchoreAccount = &xAnchoreAccount
	return r
}

func (r ApiSyncImageInventoryRequest) Execute() ([]InventoryItem, *_nethttp.Response, error) {
	return r.ApiService.SyncImageInventoryExecute(r)
}

/*
SyncImageInventory synchronizes the list of the images in a given cluster for the inventory

synchronizes the list of the images that are in use

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSyncImageInventoryRequest
*/
func (a *InventoriesApiService) SyncImageInventory(ctx _context.Context) ApiSyncImageInventoryRequest {
	return ApiSyncImageInventoryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []InventoryItem
func (a *InventoriesApiService) SyncImageInventoryExecute(r ApiSyncImageInventoryRequest) ([]InventoryItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []InventoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoriesApiService.SyncImageInventory")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/inventories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inventory == nil {
		return localVarReturnValue, nil, reportError("inventory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAnchoreAccount != nil {
		localVarHeaderParams["x-nextlinux-account"] = parameterToString(*r.xAnchoreAccount, "")
	}
	// body params
	localVarPostBody = r.inventory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
