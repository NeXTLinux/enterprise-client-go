/*
Nextlinux Enterprise API Server

This is the Nextlinux Enterprise API. It provides additional external API routes and functionality for enterprise users.

API version: 0.7.0
Contact: dev@nextlinux.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enterprise

import (
	"encoding/json"
)

// KubernetesNamespacesNamespaces struct for KubernetesNamespacesNamespaces
type KubernetesNamespacesNamespaces struct {
	Uid string `json:"uid"`
	Name string `json:"name"`
	Labels map[string]string `json:"labels"`
	Annotations map[string]string `json:"annotations"`
}

// NewKubernetesNamespacesNamespaces instantiates a new KubernetesNamespacesNamespaces object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesNamespacesNamespaces(uid string, name string, labels map[string]string, annotations map[string]string) *KubernetesNamespacesNamespaces {
	this := KubernetesNamespacesNamespaces{}
	this.Uid = uid
	this.Name = name
	this.Labels = labels
	this.Annotations = annotations
	return &this
}

// NewKubernetesNamespacesNamespacesWithDefaults instantiates a new KubernetesNamespacesNamespaces object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesNamespacesNamespacesWithDefaults() *KubernetesNamespacesNamespaces {
	this := KubernetesNamespacesNamespaces{}
	return &this
}

// GetUid returns the Uid field value
func (o *KubernetesNamespacesNamespaces) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *KubernetesNamespacesNamespaces) GetUidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *KubernetesNamespacesNamespaces) SetUid(v string) {
	o.Uid = v
}

// GetName returns the Name field value
func (o *KubernetesNamespacesNamespaces) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *KubernetesNamespacesNamespaces) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *KubernetesNamespacesNamespaces) SetName(v string) {
	o.Name = v
}

// GetLabels returns the Labels field value
func (o *KubernetesNamespacesNamespaces) GetLabels() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *KubernetesNamespacesNamespaces) GetLabelsOk() (*map[string]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Labels, true
}

// SetLabels sets field value
func (o *KubernetesNamespacesNamespaces) SetLabels(v map[string]string) {
	o.Labels = v
}

// GetAnnotations returns the Annotations field value
func (o *KubernetesNamespacesNamespaces) GetAnnotations() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value
// and a boolean to check if the value has been set.
func (o *KubernetesNamespacesNamespaces) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Annotations, true
}

// SetAnnotations sets field value
func (o *KubernetesNamespacesNamespaces) SetAnnotations(v map[string]string) {
	o.Annotations = v
}

func (o KubernetesNamespacesNamespaces) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uid"] = o.Uid
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["labels"] = o.Labels
	}
	if true {
		toSerialize["annotations"] = o.Annotations
	}
	return json.Marshal(toSerialize)
}

type NullableKubernetesNamespacesNamespaces struct {
	value *KubernetesNamespacesNamespaces
	isSet bool
}

func (v NullableKubernetesNamespacesNamespaces) Get() *KubernetesNamespacesNamespaces {
	return v.value
}

func (v *NullableKubernetesNamespacesNamespaces) Set(val *KubernetesNamespacesNamespaces) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesNamespacesNamespaces) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesNamespacesNamespaces) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesNamespacesNamespaces(val *KubernetesNamespacesNamespaces) *NullableKubernetesNamespacesNamespaces {
	return &NullableKubernetesNamespacesNamespaces{value: val, isSet: true}
}

func (v NullableKubernetesNamespacesNamespaces) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesNamespacesNamespaces) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


