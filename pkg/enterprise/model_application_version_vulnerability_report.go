/*
Nextlinux Enterprise API Server

This is the Nextlinux Enterprise API. It provides additional external API routes and functionality for enterprise users.

API version: 0.7.0
Contact: dev@nextlinux.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enterprise

import (
	"encoding/json"
)

// ApplicationVersionVulnerabilityReport A combined vulnerability report for all artifacts associated with an application version
type ApplicationVersionVulnerabilityReport struct {
	Application *ApplicationVersionVulnerabilityReportApplication `json:"application,omitempty"`
	// Collection of vulnerabilities and affected packages on a given application version
	Vulnerabilities *[]VersionVulnerability `json:"vulnerabilities,omitempty"`
}

// NewApplicationVersionVulnerabilityReport instantiates a new ApplicationVersionVulnerabilityReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationVersionVulnerabilityReport() *ApplicationVersionVulnerabilityReport {
	this := ApplicationVersionVulnerabilityReport{}
	return &this
}

// NewApplicationVersionVulnerabilityReportWithDefaults instantiates a new ApplicationVersionVulnerabilityReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationVersionVulnerabilityReportWithDefaults() *ApplicationVersionVulnerabilityReport {
	this := ApplicationVersionVulnerabilityReport{}
	return &this
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *ApplicationVersionVulnerabilityReport) GetApplication() ApplicationVersionVulnerabilityReportApplication {
	if o == nil || o.Application == nil {
		var ret ApplicationVersionVulnerabilityReportApplication
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationVersionVulnerabilityReport) GetApplicationOk() (*ApplicationVersionVulnerabilityReportApplication, bool) {
	if o == nil || o.Application == nil {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *ApplicationVersionVulnerabilityReport) HasApplication() bool {
	if o != nil && o.Application != nil {
		return true
	}

	return false
}

// SetApplication gets a reference to the given ApplicationVersionVulnerabilityReportApplication and assigns it to the Application field.
func (o *ApplicationVersionVulnerabilityReport) SetApplication(v ApplicationVersionVulnerabilityReportApplication) {
	o.Application = &v
}

// GetVulnerabilities returns the Vulnerabilities field value if set, zero value otherwise.
func (o *ApplicationVersionVulnerabilityReport) GetVulnerabilities() []VersionVulnerability {
	if o == nil || o.Vulnerabilities == nil {
		var ret []VersionVulnerability
		return ret
	}
	return *o.Vulnerabilities
}

// GetVulnerabilitiesOk returns a tuple with the Vulnerabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationVersionVulnerabilityReport) GetVulnerabilitiesOk() (*[]VersionVulnerability, bool) {
	if o == nil || o.Vulnerabilities == nil {
		return nil, false
	}
	return o.Vulnerabilities, true
}

// HasVulnerabilities returns a boolean if a field has been set.
func (o *ApplicationVersionVulnerabilityReport) HasVulnerabilities() bool {
	if o != nil && o.Vulnerabilities != nil {
		return true
	}

	return false
}

// SetVulnerabilities gets a reference to the given []VersionVulnerability and assigns it to the Vulnerabilities field.
func (o *ApplicationVersionVulnerabilityReport) SetVulnerabilities(v []VersionVulnerability) {
	o.Vulnerabilities = &v
}

func (o ApplicationVersionVulnerabilityReport) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Application != nil {
		toSerialize["application"] = o.Application
	}
	if o.Vulnerabilities != nil {
		toSerialize["vulnerabilities"] = o.Vulnerabilities
	}
	return json.Marshal(toSerialize)
}

type NullableApplicationVersionVulnerabilityReport struct {
	value *ApplicationVersionVulnerabilityReport
	isSet bool
}

func (v NullableApplicationVersionVulnerabilityReport) Get() *ApplicationVersionVulnerabilityReport {
	return v.value
}

func (v *NullableApplicationVersionVulnerabilityReport) Set(val *ApplicationVersionVulnerabilityReport) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationVersionVulnerabilityReport) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationVersionVulnerabilityReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationVersionVulnerabilityReport(val *ApplicationVersionVulnerabilityReport) *NullableApplicationVersionVulnerabilityReport {
	return &NullableApplicationVersionVulnerabilityReport{value: val, isSet: true}
}

func (v NullableApplicationVersionVulnerabilityReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationVersionVulnerabilityReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


