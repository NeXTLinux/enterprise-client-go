/*
Nextlinux Enterprise API Server

This is the Nextlinux Enterprise API. It provides additional external API routes and functionality for enterprise users.

API version: 0.7.0
Contact: dev@nextlinux.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enterprise

import (
	"encoding/json"
)

// VersionVulnerabilityMatch The details of a match for a single matche for a vulnerability in an application version vulnerability report
type VersionVulnerabilityMatch struct {
	Fix *string `json:"fix,omitempty"`
	Location *VersionVulnerabilityMatchLocation `json:"location,omitempty"`
}

// NewVersionVulnerabilityMatch instantiates a new VersionVulnerabilityMatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionVulnerabilityMatch() *VersionVulnerabilityMatch {
	this := VersionVulnerabilityMatch{}
	return &this
}

// NewVersionVulnerabilityMatchWithDefaults instantiates a new VersionVulnerabilityMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionVulnerabilityMatchWithDefaults() *VersionVulnerabilityMatch {
	this := VersionVulnerabilityMatch{}
	return &this
}

// GetFix returns the Fix field value if set, zero value otherwise.
func (o *VersionVulnerabilityMatch) GetFix() string {
	if o == nil || o.Fix == nil {
		var ret string
		return ret
	}
	return *o.Fix
}

// GetFixOk returns a tuple with the Fix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVulnerabilityMatch) GetFixOk() (*string, bool) {
	if o == nil || o.Fix == nil {
		return nil, false
	}
	return o.Fix, true
}

// HasFix returns a boolean if a field has been set.
func (o *VersionVulnerabilityMatch) HasFix() bool {
	if o != nil && o.Fix != nil {
		return true
	}

	return false
}

// SetFix gets a reference to the given string and assigns it to the Fix field.
func (o *VersionVulnerabilityMatch) SetFix(v string) {
	o.Fix = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *VersionVulnerabilityMatch) GetLocation() VersionVulnerabilityMatchLocation {
	if o == nil || o.Location == nil {
		var ret VersionVulnerabilityMatchLocation
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVulnerabilityMatch) GetLocationOk() (*VersionVulnerabilityMatchLocation, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *VersionVulnerabilityMatch) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given VersionVulnerabilityMatchLocation and assigns it to the Location field.
func (o *VersionVulnerabilityMatch) SetLocation(v VersionVulnerabilityMatchLocation) {
	o.Location = &v
}

func (o VersionVulnerabilityMatch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Fix != nil {
		toSerialize["fix"] = o.Fix
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	return json.Marshal(toSerialize)
}

type NullableVersionVulnerabilityMatch struct {
	value *VersionVulnerabilityMatch
	isSet bool
}

func (v NullableVersionVulnerabilityMatch) Get() *VersionVulnerabilityMatch {
	return v.value
}

func (v *NullableVersionVulnerabilityMatch) Set(val *VersionVulnerabilityMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionVulnerabilityMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionVulnerabilityMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionVulnerabilityMatch(val *VersionVulnerabilityMatch) *NullableVersionVulnerabilityMatch {
	return &NullableVersionVulnerabilityMatch{value: val, isSet: true}
}

func (v NullableVersionVulnerabilityMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionVulnerabilityMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


