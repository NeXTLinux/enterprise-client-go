/*
Nextlinux Enterprise API Server

This is the Nextlinux Enterprise API. It provides additional external API routes and functionality for enterprise users.

API version: 0.7.0
Contact: dev@nextlinux.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enterprise

import (
	"encoding/json"
)

// VersionVulnerabilityReportSource The definition of the source artifacts in the application version vulnerability report
type VersionVulnerabilityReportSource struct {
	Uuid *string `json:"uuid,omitempty"`
	Host *string `json:"host,omitempty"`
	RepositoryName *string `json:"repository_name,omitempty"`
	Revision *string `json:"revision,omitempty"`
}

// NewVersionVulnerabilityReportSource instantiates a new VersionVulnerabilityReportSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionVulnerabilityReportSource() *VersionVulnerabilityReportSource {
	this := VersionVulnerabilityReportSource{}
	return &this
}

// NewVersionVulnerabilityReportSourceWithDefaults instantiates a new VersionVulnerabilityReportSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionVulnerabilityReportSourceWithDefaults() *VersionVulnerabilityReportSource {
	this := VersionVulnerabilityReportSource{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *VersionVulnerabilityReportSource) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVulnerabilityReportSource) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *VersionVulnerabilityReportSource) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *VersionVulnerabilityReportSource) SetUuid(v string) {
	o.Uuid = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *VersionVulnerabilityReportSource) GetHost() string {
	if o == nil || o.Host == nil {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVulnerabilityReportSource) GetHostOk() (*string, bool) {
	if o == nil || o.Host == nil {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *VersionVulnerabilityReportSource) HasHost() bool {
	if o != nil && o.Host != nil {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *VersionVulnerabilityReportSource) SetHost(v string) {
	o.Host = &v
}

// GetRepositoryName returns the RepositoryName field value if set, zero value otherwise.
func (o *VersionVulnerabilityReportSource) GetRepositoryName() string {
	if o == nil || o.RepositoryName == nil {
		var ret string
		return ret
	}
	return *o.RepositoryName
}

// GetRepositoryNameOk returns a tuple with the RepositoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVulnerabilityReportSource) GetRepositoryNameOk() (*string, bool) {
	if o == nil || o.RepositoryName == nil {
		return nil, false
	}
	return o.RepositoryName, true
}

// HasRepositoryName returns a boolean if a field has been set.
func (o *VersionVulnerabilityReportSource) HasRepositoryName() bool {
	if o != nil && o.RepositoryName != nil {
		return true
	}

	return false
}

// SetRepositoryName gets a reference to the given string and assigns it to the RepositoryName field.
func (o *VersionVulnerabilityReportSource) SetRepositoryName(v string) {
	o.RepositoryName = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *VersionVulnerabilityReportSource) GetRevision() string {
	if o == nil || o.Revision == nil {
		var ret string
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVulnerabilityReportSource) GetRevisionOk() (*string, bool) {
	if o == nil || o.Revision == nil {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *VersionVulnerabilityReportSource) HasRevision() bool {
	if o != nil && o.Revision != nil {
		return true
	}

	return false
}

// SetRevision gets a reference to the given string and assigns it to the Revision field.
func (o *VersionVulnerabilityReportSource) SetRevision(v string) {
	o.Revision = &v
}

func (o VersionVulnerabilityReportSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	if o.Host != nil {
		toSerialize["host"] = o.Host
	}
	if o.RepositoryName != nil {
		toSerialize["repository_name"] = o.RepositoryName
	}
	if o.Revision != nil {
		toSerialize["revision"] = o.Revision
	}
	return json.Marshal(toSerialize)
}

type NullableVersionVulnerabilityReportSource struct {
	value *VersionVulnerabilityReportSource
	isSet bool
}

func (v NullableVersionVulnerabilityReportSource) Get() *VersionVulnerabilityReportSource {
	return v.value
}

func (v *NullableVersionVulnerabilityReportSource) Set(val *VersionVulnerabilityReportSource) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionVulnerabilityReportSource) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionVulnerabilityReportSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionVulnerabilityReportSource(val *VersionVulnerabilityReportSource) *NullableVersionVulnerabilityReportSource {
	return &NullableVersionVulnerabilityReportSource{value: val, isSet: true}
}

func (v NullableVersionVulnerabilityReportSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionVulnerabilityReportSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


