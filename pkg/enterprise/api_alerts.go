/*
Nextlinux Enterprise API Server

This is the Nextlinux Enterprise API. It provides additional external API routes and functionality for enterprise users.

API version: 0.7.0
Contact: dev@nextlinux.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enterprise

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

type AlertsApi interface {

	/*
	GetAlertSummaries List all alert summaries scoped to the account

	Returns a paginated list of alert summaries in chronological order from the most to least recently generated alerts. Return alerts in the open state by default. Use query parameters for filtering

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiGetAlertSummariesRequest
	*/
	GetAlertSummaries(ctx _context.Context) ApiGetAlertSummariesRequest

	// GetAlertSummariesExecute executes the request
	//  @return []AlertSummary
	GetAlertSummariesExecute(r ApiGetAlertSummariesRequest) ([]AlertSummary, *_nethttp.Response, error)

	/*
	GetComplianceViolationAlert Get compliance violation alert by id

	Returns a single compliance violation alert object

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param uuid Identifier for the alert
	 @return ApiGetComplianceViolationAlertRequest
	*/
	GetComplianceViolationAlert(ctx _context.Context, uuid string) ApiGetComplianceViolationAlertRequest

	// GetComplianceViolationAlertExecute executes the request
	//  @return ComplianceViolationAlert
	GetComplianceViolationAlertExecute(r ApiGetComplianceViolationAlertRequest) (ComplianceViolationAlert, *_nethttp.Response, error)

	/*
	GetComplianceViolationAlerts List all compliance violation alerts scoped to the account

	Returns a paginated list of compliance violation alerts in chronological order from the most to least recently generated alerts. Return alerts in the open state by default. Use query parameters for filtering

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiGetComplianceViolationAlertsRequest
	*/
	GetComplianceViolationAlerts(ctx _context.Context) ApiGetComplianceViolationAlertsRequest

	// GetComplianceViolationAlertsExecute executes the request
	//  @return []ComplianceViolationAlert
	GetComplianceViolationAlertsExecute(r ApiGetComplianceViolationAlertsRequest) ([]ComplianceViolationAlert, *_nethttp.Response, error)

	/*
	UpdateComplianceViolationAlertState Open or close a compliance violation alert

	Idempotent op for changing the alert state to open or closed

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param uuid Identifier for the alert
	 @param state
	 @return ApiUpdateComplianceViolationAlertStateRequest
	*/
	UpdateComplianceViolationAlertState(ctx _context.Context, uuid string, state string) ApiUpdateComplianceViolationAlertStateRequest

	// UpdateComplianceViolationAlertStateExecute executes the request
	//  @return ComplianceViolationAlert
	UpdateComplianceViolationAlertStateExecute(r ApiUpdateComplianceViolationAlertStateRequest) (ComplianceViolationAlert, *_nethttp.Response, error)
}

// AlertsApiService AlertsApi service
type AlertsApiService service

type ApiGetAlertSummariesRequest struct {
	ctx _context.Context
	ApiService AlertsApi
	page *int32
	limit *int32
	type_ *string
	state *string
	createdAfter *time.Time
	createdBefore *time.Time
	resourceLabel *[]string
	xNextlinuxAccount *string
}

func (r ApiGetAlertSummariesRequest) Page(page int32) ApiGetAlertSummariesRequest {
	r.page = &page
	return r
}
func (r ApiGetAlertSummariesRequest) Limit(limit int32) ApiGetAlertSummariesRequest {
	r.limit = &limit
	return r
}
// Filter for alerts based on the type such as compliance violation
func (r ApiGetAlertSummariesRequest) Type_(type_ string) ApiGetAlertSummariesRequest {
	r.type_ = &type_
	return r
}
// Filter for alerts by current state, defaults to open alerts unless specified
func (r ApiGetAlertSummariesRequest) State(state string) ApiGetAlertSummariesRequest {
	r.state = &state
	return r
}
// Filter for alerts generated after the timestamp
func (r ApiGetAlertSummariesRequest) CreatedAfter(createdAfter time.Time) ApiGetAlertSummariesRequest {
	r.createdAfter = &createdAfter
	return r
}
// Filter for alerts generated before the timestamp
func (r ApiGetAlertSummariesRequest) CreatedBefore(createdBefore time.Time) ApiGetAlertSummariesRequest {
	r.createdBefore = &createdBefore
	return r
}
// Filter for alerts associated with a resource where the label in key&#x3D;value format such as tag&#x3D;docker.io/library/alpine:latest or repository&#x3D;library/alpine
func (r ApiGetAlertSummariesRequest) ResourceLabel(resourceLabel []string) ApiGetAlertSummariesRequest {
	r.resourceLabel = &resourceLabel
	return r
}
// An account name to change the resource scope of the request to that account, if permissions allow (admin only)
func (r ApiGetAlertSummariesRequest) XNextlinuxAccount(xNextlinuxAccount string) ApiGetAlertSummariesRequest {
	r.xNextlinuxAccount = &xNextlinuxAccount
	return r
}

func (r ApiGetAlertSummariesRequest) Execute() ([]AlertSummary, *_nethttp.Response, error) {
	return r.ApiService.GetAlertSummariesExecute(r)
}

/*
GetAlertSummaries List all alert summaries scoped to the account

Returns a paginated list of alert summaries in chronological order from the most to least recently generated alerts. Return alerts in the open state by default. Use query parameters for filtering

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAlertSummariesRequest
*/
func (a *AlertsApiService) GetAlertSummaries(ctx _context.Context) ApiGetAlertSummariesRequest {
	return ApiGetAlertSummariesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []AlertSummary
func (a *AlertsApiService) GetAlertSummariesExecute(r ApiGetAlertSummariesRequest) ([]AlertSummary, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AlertSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertsApiService.GetAlertSummaries")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alerts/summaries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.state != nil {
		localVarQueryParams.Add("state", parameterToString(*r.state, ""))
	}
	if r.createdAfter != nil {
		localVarQueryParams.Add("created_after", parameterToString(*r.createdAfter, ""))
	}
	if r.createdBefore != nil {
		localVarQueryParams.Add("created_before", parameterToString(*r.createdBefore, ""))
	}
	if r.resourceLabel != nil {
		t := *r.resourceLabel
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("resource_label", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("resource_label", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNextlinuxAccount != nil {
		localVarHeaderParams["x-nextlinux-account"] = parameterToString(*r.xNextlinuxAccount, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetComplianceViolationAlertRequest struct {
	ctx _context.Context
	ApiService AlertsApi
	uuid string
	xNextlinuxAccount *string
}

// An account name to change the resource scope of the request to that account, if permissions allow (admin only)
func (r ApiGetComplianceViolationAlertRequest) XNextlinuxAccount(xNextlinuxAccount string) ApiGetComplianceViolationAlertRequest {
	r.xNextlinuxAccount = &xNextlinuxAccount
	return r
}

func (r ApiGetComplianceViolationAlertRequest) Execute() (ComplianceViolationAlert, *_nethttp.Response, error) {
	return r.ApiService.GetComplianceViolationAlertExecute(r)
}

/*
GetComplianceViolationAlert Get compliance violation alert by id

Returns a single compliance violation alert object

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuid Identifier for the alert
 @return ApiGetComplianceViolationAlertRequest
*/
func (a *AlertsApiService) GetComplianceViolationAlert(ctx _context.Context, uuid string) ApiGetComplianceViolationAlertRequest {
	return ApiGetComplianceViolationAlertRequest{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
	}
}

// Execute executes the request
//  @return ComplianceViolationAlert
func (a *AlertsApiService) GetComplianceViolationAlertExecute(r ApiGetComplianceViolationAlertRequest) (ComplianceViolationAlert, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ComplianceViolationAlert
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertsApiService.GetComplianceViolationAlert")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alerts/compliance_violations/{uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", _neturl.PathEscape(parameterToString(r.uuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNextlinuxAccount != nil {
		localVarHeaderParams["x-nextlinux-account"] = parameterToString(*r.xNextlinuxAccount, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetComplianceViolationAlertsRequest struct {
	ctx _context.Context
	ApiService AlertsApi
	page *int32
	limit *int32
	state *string
	createdAfter *time.Time
	createdBefore *time.Time
	resourceImageDigest *string
	resourceImageTag *string
	resourceRegistry *string
	resourceRepository *string
	xNextlinuxAccount *string
}

func (r ApiGetComplianceViolationAlertsRequest) Page(page int32) ApiGetComplianceViolationAlertsRequest {
	r.page = &page
	return r
}
func (r ApiGetComplianceViolationAlertsRequest) Limit(limit int32) ApiGetComplianceViolationAlertsRequest {
	r.limit = &limit
	return r
}
// Filter for alerts by current state, defaults to open alerts unless specified
func (r ApiGetComplianceViolationAlertsRequest) State(state string) ApiGetComplianceViolationAlertsRequest {
	r.state = &state
	return r
}
// Filter for alerts generated after the timestamp
func (r ApiGetComplianceViolationAlertsRequest) CreatedAfter(createdAfter time.Time) ApiGetComplianceViolationAlertsRequest {
	r.createdAfter = &createdAfter
	return r
}
// Filter for alerts generated before the timestamp
func (r ApiGetComplianceViolationAlertsRequest) CreatedBefore(createdBefore time.Time) ApiGetComplianceViolationAlertsRequest {
	r.createdBefore = &createdBefore
	return r
}
// Filter for alerts associated with image digest
func (r ApiGetComplianceViolationAlertsRequest) ResourceImageDigest(resourceImageDigest string) ApiGetComplianceViolationAlertsRequest {
	r.resourceImageDigest = &resourceImageDigest
	return r
}
// Filter for alerts generated for the tag
func (r ApiGetComplianceViolationAlertsRequest) ResourceImageTag(resourceImageTag string) ApiGetComplianceViolationAlertsRequest {
	r.resourceImageTag = &resourceImageTag
	return r
}
// Filter for alerts associated with registry
func (r ApiGetComplianceViolationAlertsRequest) ResourceRegistry(resourceRegistry string) ApiGetComplianceViolationAlertsRequest {
	r.resourceRegistry = &resourceRegistry
	return r
}
// Filter for alerts associated with repository
func (r ApiGetComplianceViolationAlertsRequest) ResourceRepository(resourceRepository string) ApiGetComplianceViolationAlertsRequest {
	r.resourceRepository = &resourceRepository
	return r
}
// An account name to change the resource scope of the request to that account, if permissions allow (admin only)
func (r ApiGetComplianceViolationAlertsRequest) XNextlinuxAccount(xNextlinuxAccount string) ApiGetComplianceViolationAlertsRequest {
	r.xNextlinuxAccount = &xNextlinuxAccount
	return r
}

func (r ApiGetComplianceViolationAlertsRequest) Execute() ([]ComplianceViolationAlert, *_nethttp.Response, error) {
	return r.ApiService.GetComplianceViolationAlertsExecute(r)
}

/*
GetComplianceViolationAlerts List all compliance violation alerts scoped to the account

Returns a paginated list of compliance violation alerts in chronological order from the most to least recently generated alerts. Return alerts in the open state by default. Use query parameters for filtering

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetComplianceViolationAlertsRequest
*/
func (a *AlertsApiService) GetComplianceViolationAlerts(ctx _context.Context) ApiGetComplianceViolationAlertsRequest {
	return ApiGetComplianceViolationAlertsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ComplianceViolationAlert
func (a *AlertsApiService) GetComplianceViolationAlertsExecute(r ApiGetComplianceViolationAlertsRequest) ([]ComplianceViolationAlert, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []ComplianceViolationAlert
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertsApiService.GetComplianceViolationAlerts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alerts/compliance_violations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.state != nil {
		localVarQueryParams.Add("state", parameterToString(*r.state, ""))
	}
	if r.createdAfter != nil {
		localVarQueryParams.Add("created_after", parameterToString(*r.createdAfter, ""))
	}
	if r.createdBefore != nil {
		localVarQueryParams.Add("created_before", parameterToString(*r.createdBefore, ""))
	}
	if r.resourceImageDigest != nil {
		localVarQueryParams.Add("resource_image_digest", parameterToString(*r.resourceImageDigest, ""))
	}
	if r.resourceImageTag != nil {
		localVarQueryParams.Add("resource_image_tag", parameterToString(*r.resourceImageTag, ""))
	}
	if r.resourceRegistry != nil {
		localVarQueryParams.Add("resource_registry", parameterToString(*r.resourceRegistry, ""))
	}
	if r.resourceRepository != nil {
		localVarQueryParams.Add("resource_repository", parameterToString(*r.resourceRepository, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNextlinuxAccount != nil {
		localVarHeaderParams["x-nextlinux-account"] = parameterToString(*r.xNextlinuxAccount, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateComplianceViolationAlertStateRequest struct {
	ctx _context.Context
	ApiService AlertsApi
	uuid string
	state string
	xNextlinuxAccount *string
}

// An account name to change the resource scope of the request to that account, if permissions allow (admin only)
func (r ApiUpdateComplianceViolationAlertStateRequest) XNextlinuxAccount(xNextlinuxAccount string) ApiUpdateComplianceViolationAlertStateRequest {
	r.xNextlinuxAccount = &xNextlinuxAccount
	return r
}

func (r ApiUpdateComplianceViolationAlertStateRequest) Execute() (ComplianceViolationAlert, *_nethttp.Response, error) {
	return r.ApiService.UpdateComplianceViolationAlertStateExecute(r)
}

/*
UpdateComplianceViolationAlertState Open or close a compliance violation alert

Idempotent op for changing the alert state to open or closed

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuid Identifier for the alert
 @param state
 @return ApiUpdateComplianceViolationAlertStateRequest
*/
func (a *AlertsApiService) UpdateComplianceViolationAlertState(ctx _context.Context, uuid string, state string) ApiUpdateComplianceViolationAlertStateRequest {
	return ApiUpdateComplianceViolationAlertStateRequest{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
		state: state,
	}
}

// Execute executes the request
//  @return ComplianceViolationAlert
func (a *AlertsApiService) UpdateComplianceViolationAlertStateExecute(r ApiUpdateComplianceViolationAlertStateRequest) (ComplianceViolationAlert, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ComplianceViolationAlert
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertsApiService.UpdateComplianceViolationAlertState")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alerts/compliance_violations/{uuid}/{state}"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", _neturl.PathEscape(parameterToString(r.uuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"state"+"}", _neturl.PathEscape(parameterToString(r.state, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNextlinuxAccount != nil {
		localVarHeaderParams["x-nextlinux-account"] = parameterToString(*r.xNextlinuxAccount, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
