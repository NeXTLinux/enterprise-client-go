/*
Nextlinux Enterprise API Server

This is the Nextlinux Enterprise API. It provides additional external API routes and functionality for enterprise users.

API version: 0.7.0
Contact: dev@nextlinux.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enterprise

import (
	"encoding/json"
)

// VersionVulnerabilityNVDAllOf struct for VersionVulnerabilityNVDAllOf
type VersionVulnerabilityNVDAllOf struct {
	Id *string `json:"id,omitempty"`
}

// NewVersionVulnerabilityNVDAllOf instantiates a new VersionVulnerabilityNVDAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionVulnerabilityNVDAllOf() *VersionVulnerabilityNVDAllOf {
	this := VersionVulnerabilityNVDAllOf{}
	return &this
}

// NewVersionVulnerabilityNVDAllOfWithDefaults instantiates a new VersionVulnerabilityNVDAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionVulnerabilityNVDAllOfWithDefaults() *VersionVulnerabilityNVDAllOf {
	this := VersionVulnerabilityNVDAllOf{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VersionVulnerabilityNVDAllOf) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVulnerabilityNVDAllOf) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VersionVulnerabilityNVDAllOf) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VersionVulnerabilityNVDAllOf) SetId(v string) {
	o.Id = &v
}

func (o VersionVulnerabilityNVDAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableVersionVulnerabilityNVDAllOf struct {
	value *VersionVulnerabilityNVDAllOf
	isSet bool
}

func (v NullableVersionVulnerabilityNVDAllOf) Get() *VersionVulnerabilityNVDAllOf {
	return v.value
}

func (v *NullableVersionVulnerabilityNVDAllOf) Set(val *VersionVulnerabilityNVDAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionVulnerabilityNVDAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionVulnerabilityNVDAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionVulnerabilityNVDAllOf(val *VersionVulnerabilityNVDAllOf) *NullableVersionVulnerabilityNVDAllOf {
	return &NullableVersionVulnerabilityNVDAllOf{value: val, isSet: true}
}

func (v NullableVersionVulnerabilityNVDAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionVulnerabilityNVDAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


