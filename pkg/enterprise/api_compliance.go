/*
Nextlinux Enterprise API Server

This is the Nextlinux Enterprise API. It provides additional external API routes and functionality for enterprise users.

API version: 0.7.0
Contact: dev@nextlinux.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enterprise

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
	"os"
)

// Linger please
var (
	_ _context.Context
)

type ComplianceApi interface {

	/*
	AddRuntimeComplianceCheck Post a runtime compliance check

	Post a runtime compliance check

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiAddRuntimeComplianceCheckRequest
	*/
	AddRuntimeComplianceCheck(ctx _context.Context) ApiAddRuntimeComplianceCheckRequest

	// AddRuntimeComplianceCheckExecute executes the request
	//  @return RuntimeComplianceCheck
	AddRuntimeComplianceCheckExecute(r ApiAddRuntimeComplianceCheckRequest) (RuntimeComplianceCheck, *_nethttp.Response, error)

	/*
	GetRuntimeComplianceChecks Get all runtime compliance checks or just those for a given image digest

	Get all runtime compliance checks or just those for a given image digest

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiGetRuntimeComplianceChecksRequest
	*/
	GetRuntimeComplianceChecks(ctx _context.Context) ApiGetRuntimeComplianceChecksRequest

	// GetRuntimeComplianceChecksExecute executes the request
	//  @return []RuntimeComplianceCheck
	GetRuntimeComplianceChecksExecute(r ApiGetRuntimeComplianceChecksRequest) ([]RuntimeComplianceCheck, *_nethttp.Response, error)

	/*
	GetRuntimeComplianceResult Check the results of a a specific runtime compliance check

	Get the results of a specific runtime compliance check

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param complianceFileId
	 @return ApiGetRuntimeComplianceResultRequest
	*/
	GetRuntimeComplianceResult(ctx _context.Context, complianceFileId string) ApiGetRuntimeComplianceResultRequest

	// GetRuntimeComplianceResultExecute executes the request
	//  @return *os.File
	GetRuntimeComplianceResultExecute(r ApiGetRuntimeComplianceResultRequest) (*os.File, *_nethttp.Response, error)
}

// ComplianceApiService ComplianceApi service
type ComplianceApiService service

type ApiAddRuntimeComplianceCheckRequest struct {
	ctx _context.Context
	ApiService ComplianceApi
	checkType *string
	imageDigest *string
	xNextlinuxAccount *string
	result *string
	pod *string
	namespace *string
	imageTag *string
	startTime *time.Time
	endTime *time.Time
	resultFile **os.File
	reportFile **os.File
}

// The type of runtime compliance check
func (r ApiAddRuntimeComplianceCheckRequest) CheckType(checkType string) ApiAddRuntimeComplianceCheckRequest {
	r.checkType = &checkType
	return r
}
// The digest of the pod the check was run against
func (r ApiAddRuntimeComplianceCheckRequest) ImageDigest(imageDigest string) ApiAddRuntimeComplianceCheckRequest {
	r.imageDigest = &imageDigest
	return r
}
// An account name to change the resource scope of the request to that account, if permissions allow (admin only)
func (r ApiAddRuntimeComplianceCheckRequest) XNextlinuxAccount(xNextlinuxAccount string) ApiAddRuntimeComplianceCheckRequest {
	r.xNextlinuxAccount = &xNextlinuxAccount
	return r
}
// The result of the runtime compliance check
func (r ApiAddRuntimeComplianceCheckRequest) Result(result string) ApiAddRuntimeComplianceCheckRequest {
	r.result = &result
	return r
}
// The pod the check was run against
func (r ApiAddRuntimeComplianceCheckRequest) Pod(pod string) ApiAddRuntimeComplianceCheckRequest {
	r.pod = &pod
	return r
}
// The namespace of the pod the check was run against
func (r ApiAddRuntimeComplianceCheckRequest) Namespace(namespace string) ApiAddRuntimeComplianceCheckRequest {
	r.namespace = &namespace
	return r
}
// The tag of the image in the pod the check was run against
func (r ApiAddRuntimeComplianceCheckRequest) ImageTag(imageTag string) ApiAddRuntimeComplianceCheckRequest {
	r.imageTag = &imageTag
	return r
}
// The type of runtime compliance check
func (r ApiAddRuntimeComplianceCheckRequest) StartTime(startTime time.Time) ApiAddRuntimeComplianceCheckRequest {
	r.startTime = &startTime
	return r
}
// The type of runtime compliance check
func (r ApiAddRuntimeComplianceCheckRequest) EndTime(endTime time.Time) ApiAddRuntimeComplianceCheckRequest {
	r.endTime = &endTime
	return r
}
// The file with the check results
func (r ApiAddRuntimeComplianceCheckRequest) ResultFile(resultFile *os.File) ApiAddRuntimeComplianceCheckRequest {
	r.resultFile = &resultFile
	return r
}
// The file with the check port
func (r ApiAddRuntimeComplianceCheckRequest) ReportFile(reportFile *os.File) ApiAddRuntimeComplianceCheckRequest {
	r.reportFile = &reportFile
	return r
}

func (r ApiAddRuntimeComplianceCheckRequest) Execute() (RuntimeComplianceCheck, *_nethttp.Response, error) {
	return r.ApiService.AddRuntimeComplianceCheckExecute(r)
}

/*
AddRuntimeComplianceCheck Post a runtime compliance check

Post a runtime compliance check

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAddRuntimeComplianceCheckRequest
*/
func (a *ComplianceApiService) AddRuntimeComplianceCheck(ctx _context.Context) ApiAddRuntimeComplianceCheckRequest {
	return ApiAddRuntimeComplianceCheckRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RuntimeComplianceCheck
func (a *ComplianceApiService) AddRuntimeComplianceCheckExecute(r ApiAddRuntimeComplianceCheckRequest) (RuntimeComplianceCheck, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarFile         *os.File
		localVarReturnValue  RuntimeComplianceCheck
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComplianceApiService.AddRuntimeComplianceCheck")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/runtime_compliance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.checkType == nil {
		return localVarReturnValue, nil, reportError("checkType is required and must be specified")
	}
	if r.imageDigest == nil {
		return localVarReturnValue, nil, reportError("imageDigest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNextlinuxAccount != nil {
		localVarHeaderParams["x-nextlinux-account"] = parameterToString(*r.xNextlinuxAccount, "")
	}
	localVarFormParams.Add("check_type", parameterToString(*r.checkType, ""))
	localVarFormParams.Add("image_digest", parameterToString(*r.imageDigest, ""))
	if r.result != nil {
		localVarFormParams.Add("result", parameterToString(*r.result, ""))
	}
	if r.pod != nil {
		localVarFormParams.Add("pod", parameterToString(*r.pod, ""))
	}
	if r.namespace != nil {
		localVarFormParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.imageTag != nil {
		localVarFormParams.Add("image_tag", parameterToString(*r.imageTag, ""))
	}
	if r.startTime != nil {
		localVarFormParams.Add("start_time", parameterToString(*r.startTime, ""))
	}
	if r.endTime != nil {
		localVarFormParams.Add("end_time", parameterToString(*r.endTime, ""))
	}
	localVarFormFileName = "result_file"
	if r.resultFile != nil {
		localVarFile = *r.resultFile
	}
	if localVarFile != nil {
		fbs, _ := _ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
		localVarFile = nil
	}
	localVarFormFileName = "report_file"
	if r.reportFile != nil {
		localVarFile = *r.reportFile
	}
	if localVarFile != nil {
		fbs, _ := _ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRuntimeComplianceChecksRequest struct {
	ctx _context.Context
	ApiService ComplianceApi
	imageDigest *string
	xNextlinuxAccount *string
}

func (r ApiGetRuntimeComplianceChecksRequest) ImageDigest(imageDigest string) ApiGetRuntimeComplianceChecksRequest {
	r.imageDigest = &imageDigest
	return r
}
// An account name to change the resource scope of the request to that account, if permissions allow (admin only)
func (r ApiGetRuntimeComplianceChecksRequest) XNextlinuxAccount(xNextlinuxAccount string) ApiGetRuntimeComplianceChecksRequest {
	r.xNextlinuxAccount = &xNextlinuxAccount
	return r
}

func (r ApiGetRuntimeComplianceChecksRequest) Execute() ([]RuntimeComplianceCheck, *_nethttp.Response, error) {
	return r.ApiService.GetRuntimeComplianceChecksExecute(r)
}

/*
GetRuntimeComplianceChecks Get all runtime compliance checks or just those for a given image digest

Get all runtime compliance checks or just those for a given image digest

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetRuntimeComplianceChecksRequest
*/
func (a *ComplianceApiService) GetRuntimeComplianceChecks(ctx _context.Context) ApiGetRuntimeComplianceChecksRequest {
	return ApiGetRuntimeComplianceChecksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []RuntimeComplianceCheck
func (a *ComplianceApiService) GetRuntimeComplianceChecksExecute(r ApiGetRuntimeComplianceChecksRequest) ([]RuntimeComplianceCheck, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []RuntimeComplianceCheck
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComplianceApiService.GetRuntimeComplianceChecks")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/runtime_compliance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.imageDigest != nil {
		localVarQueryParams.Add("image_digest", parameterToString(*r.imageDigest, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNextlinuxAccount != nil {
		localVarHeaderParams["x-nextlinux-account"] = parameterToString(*r.xNextlinuxAccount, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRuntimeComplianceResultRequest struct {
	ctx _context.Context
	ApiService ComplianceApi
	complianceFileId string
	xNextlinuxAccount *string
}

// An account name to change the resource scope of the request to that account, if permissions allow (admin only)
func (r ApiGetRuntimeComplianceResultRequest) XNextlinuxAccount(xNextlinuxAccount string) ApiGetRuntimeComplianceResultRequest {
	r.xNextlinuxAccount = &xNextlinuxAccount
	return r
}

func (r ApiGetRuntimeComplianceResultRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.GetRuntimeComplianceResultExecute(r)
}

/*
GetRuntimeComplianceResult Check the results of a a specific runtime compliance check

Get the results of a specific runtime compliance check

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param complianceFileId
 @return ApiGetRuntimeComplianceResultRequest
*/
func (a *ComplianceApiService) GetRuntimeComplianceResult(ctx _context.Context, complianceFileId string) ApiGetRuntimeComplianceResultRequest {
	return ApiGetRuntimeComplianceResultRequest{
		ApiService: a,
		ctx: ctx,
		complianceFileId: complianceFileId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *ComplianceApiService) GetRuntimeComplianceResultExecute(r ApiGetRuntimeComplianceResultRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComplianceApiService.GetRuntimeComplianceResult")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/runtime_compliance/result/{compliance_file_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"compliance_file_id"+"}", _neturl.PathEscape(parameterToString(r.complianceFileId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNextlinuxAccount != nil {
		localVarHeaderParams["x-nextlinux-account"] = parameterToString(*r.xNextlinuxAccount, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
