/*
Anchore Enterprise API Server

This is the Anchore Enterprise API. It provides additional external API routes and functionality for enterprise users.

API version: 0.2.1
Contact: dev@nextlinux.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enterprise

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type StatelessApi interface {

	/*
	GetStatelessSbomVulnerabilities Get vulnerabilities for input sbom by type

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param vtype
	 @return ApiGetStatelessSbomVulnerabilitiesRequest
	*/
	GetStatelessSbomVulnerabilities(ctx _context.Context, vtype string) ApiGetStatelessSbomVulnerabilitiesRequest

	// GetStatelessSbomVulnerabilitiesExecute executes the request
	//  @return SBOMVulnerabilitiesResponse
	GetStatelessSbomVulnerabilitiesExecute(r ApiGetStatelessSbomVulnerabilitiesRequest) (SBOMVulnerabilitiesResponse, *_nethttp.Response, error)
}

// StatelessApiService StatelessApi service
type StatelessApiService service

type ApiGetStatelessSbomVulnerabilitiesRequest struct {
	ctx _context.Context
	ApiService StatelessApi
	vtype string
	sbom *interface{}
	willNotFix *bool
	xAnchoreAccount *string
}

func (r ApiGetStatelessSbomVulnerabilitiesRequest) Sbom(sbom interface{}) ApiGetStatelessSbomVulnerabilitiesRequest {
	r.sbom = &sbom
	return r
}
// Vulnerability data publishers explicitly won&#39;t fix some vulnerabilities. This is captured by will_not_fix attribute of each result. If the query parameter is set, results matching it&#39;s value will be filtered. Results are not filtered if the query parameter is unset
func (r ApiGetStatelessSbomVulnerabilitiesRequest) WillNotFix(willNotFix bool) ApiGetStatelessSbomVulnerabilitiesRequest {
	r.willNotFix = &willNotFix
	return r
}
// An account name to change the resource scope of the request to that account, if permissions allow (admin only)
func (r ApiGetStatelessSbomVulnerabilitiesRequest) XAnchoreAccount(xAnchoreAccount string) ApiGetStatelessSbomVulnerabilitiesRequest {
	r.xAnchoreAccount = &xAnchoreAccount
	return r
}

func (r ApiGetStatelessSbomVulnerabilitiesRequest) Execute() (SBOMVulnerabilitiesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetStatelessSbomVulnerabilitiesExecute(r)
}

/*
GetStatelessSbomVulnerabilities Get vulnerabilities for input sbom by type

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param vtype
 @return ApiGetStatelessSbomVulnerabilitiesRequest
*/
func (a *StatelessApiService) GetStatelessSbomVulnerabilities(ctx _context.Context, vtype string) ApiGetStatelessSbomVulnerabilitiesRequest {
	return ApiGetStatelessSbomVulnerabilitiesRequest{
		ApiService: a,
		ctx: ctx,
		vtype: vtype,
	}
}

// Execute executes the request
//  @return SBOMVulnerabilitiesResponse
func (a *StatelessApiService) GetStatelessSbomVulnerabilitiesExecute(r ApiGetStatelessSbomVulnerabilitiesRequest) (SBOMVulnerabilitiesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SBOMVulnerabilitiesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StatelessApiService.GetStatelessSbomVulnerabilities")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stateless/sbom/vuln/{vtype}"
	localVarPath = strings.Replace(localVarPath, "{"+"vtype"+"}", _neturl.PathEscape(parameterToString(r.vtype, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.sbom == nil {
		return localVarReturnValue, nil, reportError("sbom is required and must be specified")
	}

	if r.willNotFix != nil {
		localVarQueryParams.Add("will_not_fix", parameterToString(*r.willNotFix, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xAnchoreAccount != nil {
		localVarHeaderParams["x-nextlinux-account"] = parameterToString(*r.xAnchoreAccount, "")
	}
	// body params
	localVarPostBody = r.sbom
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
